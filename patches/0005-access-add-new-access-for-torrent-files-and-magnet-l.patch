From f93c9b1dafd0a379473a7aec97aebdb8c4d9254f Mon Sep 17 00:00:00 2001
From: Jonathan Calmels <jbjcalmels@gmail.com>
Date: Mon, 16 Feb 2015 22:10:10 +0100
Subject: [PATCH 5/6] access: add new access for torrent files and magnet links

---
 configure.ac                       |  12 +
 modules/access/Makefile.am         |   7 +
 modules/access/torrent/access.cpp  | 239 +++++++++++++++++++
 modules/access/torrent/torrent.cpp | 458 +++++++++++++++++++++++++++++++++++++
 modules/access/torrent/torrent.h   | 188 +++++++++++++++
 po/POTFILES.in                     |   3 +
 6 files changed, 907 insertions(+)
 create mode 100644 modules/access/torrent/access.cpp
 create mode 100644 modules/access/torrent/torrent.cpp
 create mode 100644 modules/access/torrent/torrent.h

diff --git a/configure.ac b/configure.ac
index 4101071..a095654 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1612,6 +1612,18 @@ dnl
 PKG_ENABLE_MODULES_VLC([ARCHIVE], [access_archive], [libarchive >= 3.1.0], (libarchive support), [auto])
 
 dnl
+dnl libtorrent
+dnl
+AC_ARG_ENABLE(torrent,
+  [AS_HELP_STRING([--enable-torrent],
+    [enable the support of torrent files and magnet links (default disabled)])])
+AS_IF([test "$HAVE_CXX11" = "1" -a "${enable_torrent}" = "yes"], [
+  PKG_CHECK_MODULES(TORRENT, libtorrent-rasterbar, [
+    VLC_ADD_PLUGIN([access_torrent])
+  ], [ AC_MSG_WARN([${TORRENT_PKG_ERRORS}.]) ])
+])
+
+dnl
 dnl  live555 input
 dnl
 AC_ARG_ENABLE(live555,
diff --git a/modules/access/Makefile.am b/modules/access/Makefile.am
index 3bc9146..15bbd0c 100644
--- a/modules/access/Makefile.am
+++ b/modules/access/Makefile.am
@@ -29,6 +29,13 @@ access_LTLIBRARIES += libfilesystem_plugin.la
 libidummy_plugin_la_SOURCES = access/idummy.c
 access_LTLIBRARIES += libidummy_plugin.la
 
+libaccess_torrent_plugin_la_SOURCES = access/torrent/access.cpp access/torrent/torrent.cpp
+libaccess_torrent_plugin_la_CXXFLAGS = $(AM_CXXFLAGS) $(TORRENT_CFLAGS)
+libaccess_torrent_plugin_la_LIBADD = $(AM_LIBADD) $(TORRENT_LIBS)
+libaccess_torrent_plugin_la_LDFLAGS = $(AM_LDFLAGS) -rpath '$(accessdir)'
+access_LTLIBRARIES += $(LTLIBaccess_torrent)
+EXTRA_LTLIBRARIES += libaccess_torrent_plugin.la
+
 libimem_plugin_la_SOURCES = access/imem.c
 libimem_plugin_la_LIBADD = $(LIBM)
 access_LTLIBRARIES += libimem_plugin.la
diff --git a/modules/access/torrent/access.cpp b/modules/access/torrent/access.cpp
new file mode 100644
index 0000000..f28b3dd
--- /dev/null
+++ b/modules/access/torrent/access.cpp
@@ -0,0 +1,239 @@
+/*****************************************************************************
+ * Copyright (C) 2014 VLC authors, VideoLAN and Videolabs
+ *
+ * Authors: Jonathan Calmels <exxo@videolabs.io>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_access.h>
+#include <vlc_plugin.h>
+#include <vlc_url.h>
+#include <vlc_input_item.h>
+#include <vlc_configuration.h>
+
+#include "torrent.h"
+
+static int Open(vlc_object_t*);
+static void Close(vlc_object_t*);
+static int ReadDir(access_t*, input_item_node_t*);
+static int Control(access_t*, int, va_list);
+static int Seek(access_t*, uint64_t);
+static block_t* Block(access_t*);
+
+struct access_sys_t
+{
+    TorrentAccess torrent;
+};
+
+/*****************************************************************************
+ * Module descriptor
+ *****************************************************************************/
+
+vlc_module_begin()
+
+    set_shortname(N_("Torrent streaming"))
+    set_description(N_("Stream torrent files and magnet links"))
+    set_capability("access", 51)
+    set_category(CAT_INPUT)
+    set_subcategory(SUBCAT_INPUT_ACCESS)
+    add_shortcut("torrent", "file", "magnet")
+    set_callbacks(Open, Close)
+
+    add_integer("torrent-file-index", -1, N_("Torrent file index"),
+      N_("Index of the file to play within the torrent"), false)
+    change_private()
+
+    add_directory("download-dir", nullptr, N_("Download directory"),
+      N_("Directory used to store dowloaded files"), false)
+    add_bool("keep-files", true, N_("Keep downloaded files"),
+      N_("Determine whether VLC keeps the dowloaded files or removes them after use"), false)
+    add_integer("upload-rate-limit", 0, N_("Upload rate limit (kB/s) [0=unlimited]"),
+      N_("Maximum upload rate in kilobytes per second"), false)
+    add_integer("download-rate-limit", 0, N_("Download rate limit (kB/s) [0=unlimited]"),
+      N_("Maximum download rate in kilobytes per second"), false)
+    add_float("share-ratio-limit", 2.0, N_("Share ratio limit"),
+      N_("Share ratio limit to maintain (uploaded bytes / downloaded bytes)"), false)
+
+vlc_module_end()
+
+/*****************************************************************************
+ * Open:
+ *****************************************************************************/
+
+static unique_char_ptr var_GetDownloadDir(const access_t* p_access)
+{
+    auto dir = var_InheritString(p_access, "download-dir");
+    if (dir == nullptr)
+        dir = config_GetUserDir(VLC_DOWNLOAD_DIR);
+    return {dir, std::free};
+}
+
+static int open(access_t* p_access)
+{
+    lt::add_torrent_params params;
+
+    if (TorrentAccess::ParseURI(p_access->psz_location, params) != VLC_SUCCESS)
+        return VLC_EGENERIC;
+
+    auto dir = var_GetDownloadDir(p_access);
+    if (dir == nullptr)
+        return VLC_EGENERIC;
+
+    p_access->p_sys = new access_sys_t{{p_access}};
+    auto& torrent = p_access->p_sys->torrent;
+    auto file_at = var_InheritInteger(p_access, "torrent-file-index");
+
+    torrent.set_parameters(std::move(params));
+    torrent.set_download_dir(std::move(dir));
+
+    if (!torrent.has_torrent_metadata()) {
+        // This is a magnet link, first we need to generate the torrent file.
+        if (torrent.RetrieveTorrentMetadata() != VLC_SUCCESS)
+            return VLC_EGENERIC;
+    }
+    if (file_at < 0) {
+        // Browse the torrent metadata and generate a playlist with the files in it.
+        ACCESS_SET_CALLBACKS(nullptr, nullptr, Control, nullptr);
+        p_access->pf_readdir = ReadDir;
+        return VLC_SUCCESS;
+    }
+    else {
+        // Torrent file has been browsed, start the download.
+        ACCESS_SET_CALLBACKS(nullptr, Block, Control, Seek);
+        torrent.StartDownload(file_at);
+        return VLC_SUCCESS;
+    }
+}
+
+static int Open(vlc_object_t* p_this)
+{
+    auto p_access = (access_t*) p_this;
+
+    try {
+        auto r = open(p_access);
+        if (r != VLC_SUCCESS)
+            delete p_access->p_sys;
+        else
+            access_InitFields(p_access);
+        return r;
+    }
+    catch (std::bad_alloc& e) {
+        delete p_access->p_sys;
+        return VLC_ENOMEM;
+    }
+}
+
+/*****************************************************************************
+ * Close:
+ *****************************************************************************/
+
+static void Close(vlc_object_t* p_this)
+{
+    auto p_access = (access_t*) p_this;
+    delete p_access->p_sys;
+}
+
+/*****************************************************************************
+ * Callbacks
+ *****************************************************************************/
+
+static int ReadDir(access_t* p_access, input_item_node_t* p_node)
+{
+    using ItemsHeap = std::map<uint64_t, input_item_t*>;
+
+    const auto& torrent = p_access->p_sys->torrent;
+    const auto& metadata = torrent.torrent_metadata();
+    const auto& files = metadata.files();
+
+    ItemsHeap items;
+    for (auto i = 0; i < metadata.num_files(); ++i) {
+        const auto f = metadata.file_at(i);
+        const auto psz_uri = torrent.uri().c_str();
+        const auto psz_name = files.file_name(i);
+        const auto psz_option = "torrent-file-index=" + std::to_string(i);
+
+        auto p_item = input_item_New(psz_uri, psz_name.c_str());
+        input_item_AddOption(p_item, psz_option.c_str(), VLC_INPUT_OPTION_TRUSTED);
+        items[f.size] = p_item;
+    }
+    std::for_each(items.rbegin(), items.rend(), [p_node](ItemsHeap::value_type& p) {
+        input_item_node_AppendItem(p_node, p.second);
+        input_item_Release(p.second);
+    });
+
+    return VLC_SUCCESS;
+}
+
+static int Control(access_t* p_access, int i_query, va_list args)
+{
+    switch(i_query) {
+    case ACCESS_CAN_FASTSEEK:
+        *va_arg(args, bool*) = false;
+        break;
+
+    case ACCESS_CAN_PAUSE:
+    case ACCESS_CAN_SEEK:
+    case ACCESS_CAN_CONTROL_PACE:
+        *va_arg(args, bool*) = true;
+        break;
+
+    case ACCESS_GET_PTS_DELAY:
+        *va_arg(args, int64_t*) = DEFAULT_PTS_DELAY * 1000;
+        break;
+
+    case ACCESS_SET_PAUSE_STATE:
+        return VLC_SUCCESS;
+
+    case ACCESS_GET_TITLE_INFO:
+    case ACCESS_SET_TITLE:
+    case ACCESS_SET_PRIVATE_ID_STATE:
+        return VLC_EGENERIC;
+
+    default:
+        msg_Warn(p_access, "unimplemented query in control");
+        return VLC_EGENERIC;
+    }
+
+    return VLC_SUCCESS;
+}
+
+static block_t* Block(access_t* p_access)
+{
+    Piece p;
+    bool eof;
+
+    auto& torrent = p_access->p_sys->torrent;
+    torrent.ReadNextPiece(p, eof);
+
+    p_access->info.b_eof = eof;
+    if (eof || p.data == nullptr)
+        return nullptr;
+    p_access->info.i_pos += p.length;
+    return p.data.release();
+}
+
+static int Seek(access_t *p_access, uint64_t i_pos)
+{
+    auto& torrent = p_access->p_sys->torrent;
+    torrent.SelectPieces(i_pos);
+    p_access->info.i_pos = i_pos;
+    return VLC_SUCCESS;
+}
diff --git a/modules/access/torrent/torrent.cpp b/modules/access/torrent/torrent.cpp
new file mode 100644
index 0000000..ba66959
--- /dev/null
+++ b/modules/access/torrent/torrent.cpp
@@ -0,0 +1,458 @@
+/*****************************************************************************
+ * Copyright (C) 2014 VLC authors, VideoLAN and Videolabs
+ *
+ * Authors: Jonathan Calmels <exxo@videolabs.io>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include <cassert>
+#include <functional>
+#include <fstream>
+#include <chrono>
+#include <unordered_map>
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+#include <vlc_common.h>
+#include <vlc_url.h>
+
+#undef poll // XXX boost redefines poll inside libtorrent headers
+
+#include <libtorrent/alert_types.hpp>
+#include <libtorrent/create_torrent.hpp>
+#include <libtorrent/extensions/metadata_transfer.hpp>
+#include <libtorrent/extensions/ut_metadata.hpp>
+#include <libtorrent/extensions/ut_pex.hpp>
+#include <libtorrent/extensions/smart_ban.hpp>
+#include <libtorrent/magnet_uri.hpp>
+#include <libtorrent/bencode.hpp>
+
+#include "torrent.h"
+
+TorrentAccess::~TorrentAccess()
+{
+    const auto keep_files = var_InheritBool(access_, "keep-files");
+
+    session_.pause();
+    if (handle_.is_valid()) {
+        SaveSessionStates(keep_files);
+        if (keep_files)
+            session_.remove_torrent(handle_);
+        else {
+            session_.remove_torrent(handle_, lt::session::delete_files);
+            CacheDel(torrent_hash() + ".torrent");
+        }
+    }
+
+    stopped_ = true;
+    if (thread_.joinable())
+        thread_.join();
+}
+
+void TorrentAccess::SaveSessionStates(bool save_resume_data) const
+{
+    std::future<void> dht_state_saved;
+
+    // Save the DHT state.
+    // If we need to save the resume data as well, do it in a separate thread.
+    try {
+        const auto policy = save_resume_data ? std::launch::async : std::launch::deferred;
+        dht_state_saved = std::async(policy, [this]{
+            lt::entry state;
+            session_.save_state(state, lt::session::save_dht_state);
+            CacheSave("dht_state.dat", state);
+        });
+    }
+    catch (std::system_error&) {}
+
+    // Save resume data.
+    // The actual saving process is done by the main thread (see Run/HandleSaveResumeData).
+    if (save_resume_data) {
+        const auto resume_data_saved = resume_data_saved_.get_future();
+        handle_.save_resume_data(lth::flush_disk_cache);
+        resume_data_saved.wait();
+    }
+
+    if (dht_state_saved.valid())
+        dht_state_saved.wait();
+}
+
+int TorrentAccess::ParseURI(const std::string& uri, lt::add_torrent_params& params)
+{
+    lt::error_code ec;
+
+    const auto prefix = std::string{"magnet:?"};
+    const auto uri_decoded = std::string{decode_URI_duplicate(uri.c_str())};
+
+    if (!uri_decoded.compare(0, prefix.size(), prefix)) {
+        lt::parse_magnet_uri(uri_decoded, params, ec);
+        if (ec)
+            return VLC_EGENERIC;
+    }
+    else {
+        params.ti.reset(new lt::torrent_info{uri_decoded, ec});
+        if (ec)
+            return VLC_EGENERIC;
+    }
+    return VLC_SUCCESS;
+}
+
+int TorrentAccess::RetrieveTorrentMetadata()
+{
+    lt::error_code ec;
+
+    const auto filename = torrent_hash() + ".torrent";
+    auto path = CacheLookup(filename);
+    if (!path.empty()) {
+        set_torrent_metadata(path, ec);
+        if (!ec) {
+            set_uri("torrent://" + path); // Change the initial URI to point to the torrent in cache.
+            return VLC_SUCCESS;
+        }
+    }
+
+    session_.set_alert_mask(lta::status_notification);
+    session_.add_extension(&lt::create_metadata_plugin);
+    session_.add_extension(&lt::create_ut_metadata_plugin);
+    handle_ = session_.add_torrent(params_, ec);
+    if (ec)
+        return VLC_EGENERIC;
+
+    Run();
+    session_.remove_torrent(handle_);
+
+    // Create the torrent file and save it in cache.
+    const auto& metadata = handle_.get_torrent_info();
+    set_torrent_metadata(metadata); // XXX must happen before create_torrent (create_torrent const_cast its args ...)
+    const auto torrent = lt::create_torrent{metadata};
+    path = CacheSave(filename, torrent.generate());
+    if (path.empty())
+        return VLC_EGENERIC;
+
+    set_uri("torrent://" + path); // Change the initial URI to point to the torrent in cache.
+    return VLC_SUCCESS;
+}
+
+int TorrentAccess::StartDownload(int file_at)
+{
+    lt::error_code ec;
+    lt::lazy_entry entry;
+
+    assert(has_torrent_metadata() && file_at >= 0 && download_dir_ != nullptr);
+
+    session_.set_alert_mask(lta::status_notification | lta::storage_notification | lta::progress_notification);
+    session_.add_extension(&lt::create_ut_pex_plugin);
+    session_.add_extension(&lt::create_smart_ban_plugin);
+    SetSessionSettings();
+
+    // Start the DHT
+    auto buf = CacheLoad("dht_state.dat");
+    if (buf.size() > 0 && !lazy_bdecode(buf.data(), buf.data() + buf.size(), entry, ec) && !ec)
+        session_.load_state(entry);
+    session_.start_dht();
+
+    // Attempt to fast resume the torrent.
+    buf = CacheLoad(torrent_hash() + ".resume");
+    if (buf.size() > 0)
+#if LIBTORRENT_VERSION_MAJOR > 0
+        params_.resume_data = std::move(buf);
+#else
+        params_.resume_data = &buf;
+#endif
+
+    params_.save_path = download_dir_.get();
+    params_.storage_mode = lt::storage_mode_allocate;
+    handle_ = session_.add_torrent(params_, ec);
+    if (ec)
+        return VLC_EGENERIC;
+
+    file_at_ = file_at;
+    SelectPieces(0);
+    handle_.set_sequential_download(true);
+    status_.state = handle_.status().state;
+
+    thread_ = std::thread{&TorrentAccess::Run, this};
+    return VLC_SUCCESS;
+}
+
+void TorrentAccess::SetSessionSettings()
+{
+    auto s = session_.settings();
+
+    const auto upload_rate = var_InheritInteger(access_, "upload-rate-limit");
+    const auto download_rate = var_InheritInteger(access_, "download-rate-limit");
+    const auto share_ratio = var_InheritFloat(access_, "share-ratio-limit");
+    const auto user_agent = unique_char_ptr{var_InheritString(access_, "user-agent"), std::free};
+
+    s.user_agent = std::string{user_agent.get()} + "/" VERSION " libtorrent/" LIBTORRENT_VERSION;
+    s.active_downloads = 1;
+    s.active_seeds = 1;
+    s.announce_to_all_trackers = true;            // Announce in parallel to all trackers.
+    s.use_dht_as_fallback = false;                // Use DHT regardless of trackers status.
+    s.initial_picker_threshold = 0;               // Pieces to pick at random before doing rarest first picking.
+    s.no_atime_storage = true;                    // Linux only O_NOATIME.
+    s.no_recheck_incomplete_resume = true;        // Don't check the file when resume data is incomplete.
+    s.max_queued_disk_bytes = 2 * 1024 * 1024;    // I/O thread buffer queue in bytes (may limit the download rate).
+    s.cache_size = -1;                            // Disk read/write cache specified in units of 16 KiB (-1 for RAM/8).
+    s.max_peerlist_size = 3000;                   // Maximum number of peers per torrent.
+    s.num_want = 200;                             // Number of peers requested per tracker.
+    s.torrent_connect_boost = s.num_want / 10;    // Number of peers to try to connect to immediately.
+    s.share_ratio_limit = share_ratio;            // Share ratio limit (uploaded bytes / downloaded bytes).
+    s.upload_rate_limit = upload_rate * 1024;     // Limits the upload speed in bytes/sec.
+    s.download_rate_limit = download_rate * 1024; // Limits the download speed in bytes/sec.
+
+    session_.set_settings(s);
+
+    const auto routers = std::unordered_map<std::string, int>{
+        {"router.bittorrent.com", 6881},
+        {"router.utorrent.com", 6881},
+        {"router.bitcomet.com", 6881}
+    };
+    for (const auto& r : routers)
+        session_.add_dht_router(r);
+}
+
+void TorrentAccess::Run()
+{
+    std::deque<lt::alert*> alerts;
+
+    while (!stopped_) {
+        if (!session_.wait_for_alert(lt::seconds(1)))
+            continue;
+
+        session_.pop_alerts(&alerts);
+        for (const auto alert : alerts) {
+            switch (alert->type()) {
+                case lt::piece_finished_alert::alert_type: {
+                    const auto a = lt::alert_cast<lt::piece_finished_alert>(alert);
+                    msg_Dbg(access_, "Piece finished: %d", a->piece_index);
+                    break;
+                }
+                case lt::state_changed_alert::alert_type:
+                    HandleStateChanged(alert);
+                    break;
+                case lt::save_resume_data_alert::alert_type:
+                    HandleSaveResumeData(alert);
+                    break;
+                case lt::read_piece_alert::alert_type:
+                    HandleReadPiece(alert);
+                    break;
+                case lt::metadata_received_alert::alert_type: // Magnet file only.
+                    return;
+            }
+        }
+        alerts.clear();
+    }
+}
+
+void TorrentAccess::SelectPieces(uint64_t offset)
+{
+    assert(has_torrent_metadata() && file_at_ >= 0);
+
+    const auto& metadata = torrent_metadata();
+    const auto& file = metadata.file_at(file_at_);
+
+    const auto piece_size = metadata.piece_length();
+    const auto num_pieces = metadata.num_pieces();
+    const auto beg_req = metadata.map_file(file_at_, offset, 1);
+    const auto end_req = metadata.map_file(file_at_, file.size - 1, 1);
+
+    const auto lock = std::unique_lock<std::mutex>{queue_.mutex};
+    queue_.pieces.clear();
+
+    if (offset == file.size)
+        return;
+
+    for (auto i = 0; i < num_pieces; ++i) {
+        if (i < beg_req.piece || i > end_req.piece) {
+            handle_.piece_priority(i, 0); // Discard unwanted pieces.
+            continue;
+        }
+
+        auto off = 0;
+        auto len = piece_size;
+        if (i == beg_req.piece) { // First piece.
+            off = beg_req.start;
+            len = piece_size - off;
+        }
+        if (i == end_req.piece) // Last piece.
+            len = end_req.start + 1 - off;
+
+        handle_.piece_priority(i, 7);
+        queue_.pieces.emplace_back(i, off, len);
+    }
+}
+
+void TorrentAccess::HandleStateChanged(const lt::alert* alert)
+{
+    const auto a = lt::alert_cast<lt::state_changed_alert>(alert);
+    const char* msg;
+
+    switch (a->state) {
+        case lts::queued_for_checking:
+            msg = "Queued for checking";
+            break;
+        case lts::downloading_metadata:
+            msg = "Downloading metadata";
+            break;
+        case lts::finished:
+            msg = "Finished";
+            break;
+        case lts::allocating:
+            msg = "Allocating space";
+            break;
+        case lts::checking_resume_data:
+            msg = "Resuming";
+            break;
+        case lts::checking_files:
+            msg = "Checking files";
+            break;
+        case lts::seeding:
+            msg = "Seeding";
+            break;
+        case lts::downloading:
+            msg = "Downloading";
+            break;
+        default:
+            return;
+    }
+    msg_Info(access_, "Torrent state changed to: %s", msg);
+
+    const auto lock = std::unique_lock<std::mutex>{status_.mutex};
+    status_.state = a->state;
+    status_.cond.notify_one();
+}
+
+void TorrentAccess::HandleSaveResumeData(const lt::alert* alert) const
+{
+    const auto a = lt::alert_cast<lt::save_resume_data_alert>(alert);
+
+    if (a->resume_data != nullptr)
+        CacheSave(torrent_hash() + ".resume", *a->resume_data);
+    resume_data_saved_.set_value();
+}
+
+void TorrentAccess::HandleReadPiece(const lt::alert* alert)
+{
+    const auto a = lt::alert_cast<lt::read_piece_alert>(alert);
+
+    if (a->buffer == nullptr) { // Read error, try again.
+        handle_.read_piece(a->piece);
+        return;
+    }
+
+    const auto lock = std::unique_lock<std::mutex>{queue_.mutex};
+
+    auto p = std::find_if(std::begin(queue_.pieces), std::end(queue_.pieces),
+      [a](const Piece& p) { return a->piece == p.id; }
+    );
+    if (p == std::end(queue_.pieces) || p->data != nullptr)
+        return;
+
+    assert(a->size >= p->length);
+    p->data = {block_Alloc(p->length), block_Release};
+    std::memcpy(p->data->p_buffer, a->buffer.get() + p->offset, p->length);
+    if (p->id == queue_.pieces.front().id)
+        queue_.cond.notify_one();
+}
+
+void TorrentAccess::ReadNextPiece(Piece& piece, bool& eof)
+{
+    const auto timeout = std::chrono::milliseconds{500};
+    eof = false;
+
+    {
+        auto lock = std::unique_lock<std::mutex>{status_.mutex};
+        const auto cond = status_.cond.wait_for(lock, timeout, [&s = status_.state]{
+                return s == lts::downloading || s == lts::finished || s == lts::seeding;
+        });
+        if (!cond)
+            return;
+    }
+
+    auto lock = std::unique_lock<std::mutex>{queue_.mutex};
+    if (queue_.pieces.empty()) {
+        eof = true;
+        return;
+    }
+    auto& next_piece = queue_.pieces.front();
+    if (!next_piece.requested) {
+        handle_.set_piece_deadline(next_piece.id, 0, lth::alert_when_available);
+        next_piece.requested = true;
+        msg_Dbg(access_, "Piece requested: %d", next_piece.id);
+    }
+    if (!queue_.cond.wait_for(lock, timeout, [&next_piece]{ return next_piece.data != nullptr; }))
+        return;
+
+    piece = std::move(next_piece);
+    queue_.pieces.pop_front();
+    msg_Dbg(access_, "Got piece: %d", piece.id);
+}
+
+std::string TorrentAccess::CacheSave(const std::string& name, const lt::entry& entry) const
+{
+    if (cache_dir_ == nullptr)
+        return {};
+
+    const auto path = std::string{cache_dir_.get()} + DIR_SEP + name;
+    std::ofstream file{path, std::ios_base::binary | std::ios_base::trunc};
+    if (!file)
+        return {};
+
+    lt::bencode(std::ostream_iterator<char>{file}, entry);
+    return path;
+}
+
+std::string TorrentAccess::CacheLookup(const std::string& name) const
+{
+    if (cache_dir_ == nullptr)
+        return {};
+
+    const auto path = std::string{cache_dir_.get()} + DIR_SEP + name;
+    std::ifstream file{path};
+    if (!file.good())
+        return {};
+
+    return path;
+}
+
+std::vector<char> TorrentAccess::CacheLoad(const std::string& name) const
+{
+    if (cache_dir_ == nullptr)
+        return {};
+
+    const auto path = std::string{cache_dir_.get()} + DIR_SEP + name;
+    std::ifstream file{path, std::ios_base::binary | std::ios_base::ate};
+    if (!file.good())
+        return {};
+
+    const auto len = file.tellg();
+    file.seekg(0);
+    std::vector<char> buf(len);
+    file.read(buf.data(), len);
+    return buf;
+}
+
+void TorrentAccess::CacheDel(const std::string& name) const
+{
+    if (cache_dir_ == nullptr)
+        return;
+
+    const auto path = std::string{cache_dir_.get()} + DIR_SEP + name;
+    std::remove(path.c_str());
+}
diff --git a/modules/access/torrent/torrent.h b/modules/access/torrent/torrent.h
new file mode 100644
index 0000000..e6f2cef
--- /dev/null
+++ b/modules/access/torrent/torrent.h
@@ -0,0 +1,188 @@
+/*****************************************************************************
+ * Copyright (C) 2014 VLC authors, VideoLAN and Videolabs
+ *
+ * Authors: Jonathan Calmels <exxo@videolabs.io>
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU Lesser General Public License as published by
+ * the Free Software Foundation; either version 2.1 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * along with this program; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+#include <string>
+#include <cstdlib>
+#include <memory>
+#include <deque>
+#include <atomic>
+#include <thread>
+#include <mutex>
+#include <future>
+#include <condition_variable>
+
+#include <vlc_common.h>
+#include <vlc_access.h>
+
+#undef poll // XXX boost redefines poll inside libtorrent headers
+
+#include <libtorrent/session.hpp>
+#include <libtorrent/torrent_handle.hpp>
+#include <libtorrent/torrent_info.hpp>
+#include <libtorrent/add_torrent_params.hpp>
+
+namespace lt = libtorrent;
+
+using lta = lt::alert;
+using lts = lt::torrent_status;
+using lth = lt::torrent_handle;
+using unique_char_ptr = std::unique_ptr<char, void (*)(void*)>;
+using unique_block_ptr = std::unique_ptr<block_t, void (*)(block_t*)>;
+
+struct Piece
+{
+    Piece() : Piece{0, 0, 0} {}
+    Piece(int i, int off, int len) :
+        id{i},
+        offset{off},
+        length{len},
+        requested{false},
+        data{nullptr, block_Release}
+    {}
+
+    int              id;
+    int              offset;
+    int              length;
+    bool             requested;
+    unique_block_ptr data;
+};
+
+struct PiecesQueue
+{
+    std::mutex              mutex;
+    std::condition_variable cond;
+    std::deque<Piece>       pieces;
+};
+
+struct Status
+{
+    std::mutex              mutex;
+    std::condition_variable cond;
+    lts::state_t            state;
+};
+
+class TorrentAccess
+{
+    public:
+        TorrentAccess(access_t* p_access) :
+            access_{p_access},
+            file_at_{-1},
+            stopped_{false},
+            download_dir_{nullptr, std::free},
+            cache_dir_{config_GetUserDir(VLC_CACHE_DIR), std::free},
+            uri_{std::string{"torrent://"} + p_access->psz_location},
+            fingerprint_{"VL", PACKAGE_VERSION_MAJOR, PACKAGE_VERSION_MINOR,
+                               PACKAGE_VERSION_REVISION, PACKAGE_VERSION_EXTRA},
+            session_{fingerprint_}
+        {}
+        ~TorrentAccess();
+
+        static int ParseURI(const std::string& uri, lt::add_torrent_params& params);
+        int RetrieveTorrentMetadata();
+        int StartDownload(int file_at);
+        void ReadNextPiece(Piece& piece, bool& eof);
+        void SelectPieces(uint64_t offset);
+
+        void set_download_dir(unique_char_ptr&& dir);
+        void set_parameters(lt::add_torrent_params&& params);
+        const lt::torrent_info& torrent_metadata() const;
+        bool has_torrent_metadata() const;
+        const std::string& uri() const;
+
+    private:
+        void Run();
+        void SetSessionSettings();
+        void SaveSessionStates(bool save_resume_data) const;
+        void HandleStateChanged(const lt::alert* alert);
+        void HandleSaveResumeData(const lt::alert* alert) const;
+        void HandleReadPiece(const lt::alert* alert);
+        std::string CacheSave(const std::string& name, const lt::entry& entry) const;
+        std::string CacheLookup(const std::string& name) const;
+        std::vector<char> CacheLoad(const std::string& name) const;
+        void CacheDel(const std::string& name) const;
+
+        const std::string& torrent_hash() const;
+        void set_uri(const std::string& uri);
+        void set_torrent_metadata(const lt::torrent_info& metadata);
+        void set_torrent_metadata(const std::string& path, lt::error_code& ec);
+
+        access_t*                  access_;
+        int                        file_at_;
+        std::atomic_bool           stopped_;
+        unique_char_ptr            download_dir_;
+        unique_char_ptr            cache_dir_;
+        std::string                uri_;
+        lt::fingerprint            fingerprint_;
+        lt::session                session_;
+        mutable std::promise<void> resume_data_saved_;
+        PiecesQueue                queue_;
+        Status                     status_;
+        lt::add_torrent_params     params_;
+        lt::torrent_handle         handle_;
+        std::thread                thread_;
+};
+
+inline void TorrentAccess::set_download_dir(unique_char_ptr&& dir)
+{
+    download_dir_ = std::move(dir);
+}
+
+inline void TorrentAccess::set_parameters(lt::add_torrent_params&& params)
+{
+    params_ = std::move(params);
+}
+
+inline void TorrentAccess::set_torrent_metadata(const lt::torrent_info& metadata)
+{
+    params_.ti.reset(new lt::torrent_info{metadata});
+}
+
+inline void TorrentAccess::set_torrent_metadata(const std::string& path, lt::error_code& ec)
+{
+    set_torrent_metadata({path, ec});
+    if (ec)
+        params_.ti.reset();
+}
+
+inline const lt::torrent_info& TorrentAccess::torrent_metadata() const
+{
+    return *params_.ti;
+}
+
+inline bool TorrentAccess::has_torrent_metadata() const
+{
+    return params_.ti != nullptr;
+}
+
+inline void TorrentAccess::set_uri(const std::string& uri)
+{
+    uri_ = uri;
+}
+
+inline const std::string& TorrentAccess::uri() const
+{
+    return uri_;
+}
+
+inline const std::string& TorrentAccess::torrent_hash() const
+{
+    static const auto hash = lt::to_hex(params_.info_hash.to_string());
+    return hash;
+}
diff --git a/po/POTFILES.in b/po/POTFILES.in
index 98369c1..7eab2dc 100644
--- a/po/POTFILES.in
+++ b/po/POTFILES.in
@@ -262,6 +262,9 @@ modules/access/shm.c
 modules/access/smb.c
 modules/access/tcp.c
 modules/access/timecode.c
+modules/access/torrent/access.cpp
+modules/access/torrent/torrent.cpp
+modules/access/torrent/torrent.h
 modules/access/udp.c
 modules/access/v4l2/controls.c
 modules/access/v4l2/v4l2.c
-- 
2.3.1

